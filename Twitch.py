# -*- coding: utf-8 -*-

# import time
# import datetime

import json

import requests

url_base = "https://api.twitch.tv/helix/"

class Twitch:
    """
    Twitch API - Library
    ~~~~~~~~~~~~~~~~~~~~~~~~

    Basic usage:

    Visit: https://twitchapps.com/tokengen/
        - In Client ID, insert: wp1v6buwwqn35hnvviozjgud4pz7tx or You can use your own Client ID.
        - Visit https://dev.twitch.tv/docs/authentication, check Scopes and insert the scopes you need in the twitchapps.
        - Click on Connect button to generate your token.

        >>> from custom_lib.Twitch import Twitch
        >>> ttv = Twitch(user="YOUR TTV Channel", client_id="We ID or YOUR ID", autorization="Token generated by twitchapps")

    Methods:

        - getUserID(username: str)
        - getFollowers(username: str)
        - comercial(username: str, seconds: int)
        - create_reward(title: str, cost: int)
        - view_rewards()
    """
    def __init__(self, user: str, client_id: str, autorization: str):
        self.user = user
        self.headers = {
            "Client-ID": "{}".format(client_id),
            "Authorization": "Bearer {}".format(autorization)
        }

    def getUserID(self, username: str):
        """Pega o ID do usuário a partir do username da Twitch"""
        url = "{}users?login={}".format(url_base, username)

        r = requests.get(url, headers=self.headers)
        # if r.status_code == 200:
        #     return r.json()["data"][0]["id"]
        # print("User ID: {}".format(user_id))
        global user_id
        user_id = r.json()["data"][0]["id"]
        return user_id

    def getFollowers(self, username: str):
        """Pega o número de seguidores do usuário
        
        Obs: Precisa fornecer o nome do canal na Twitch
        """
        self.getUserID(username)
        url = "{}users/follows?to_id={}".format(url_base, user_id)
        r = requests.get(url, headers=self.headers)

        total_followers = r.json()["total"]

        print(f"{username} possui {total_followers} seguidores.")
    
    def comercial(self, username: str, seconds: int):
        """
        Iniciar comercial no Canal da Twitch

        Parametros Obrigatórios: Nome do Canal & Segundos de AD: 30, 60, 90, 120, 150, 180
        """
        url = "{}channels/commercial".format(url_base)
        self.getUserID(username)
        data = {
            "broadcaster_id": user_id,
            "length": seconds
        }
        r = requests.post(url, data=data, headers=self.headers)

        if r.status_code == 200:
            print(f"Comercial Iniciado! Tempo de AD: {seconds} segundos")
        elif r.status_code == 400:
            # response = r.json()
            headers = r.headers.get("Ratelimit-Reset") # print(headers)
            tempo = headers
            print("Comercial anteriormente iniciado. Aguarde {tempo} segundos para iniciar um novo comercial.")

    def create_reward(self, title: str, cost: int, prompt: str = None, is_enabled: bool = True, background_color: str = "#392e5c", is_user_input_required: bool = False, is_max_per_stream_enabled: bool = False,max_per_stream: int = None,is_max_per_user_per_stream_enabled: bool = False, max_per_user_per_stream: int = 5,is_global_cooldown_enabled: bool = False, global_cooldown_seconds: int = 5,should_redemptions_skip_request_queue: bool = False):
        """
        Crie recompensas para o seu canal.

        Parâmetros Obrigatórios:

        title (Título da recompensa)
        cost (Custo da recompensa)
        
        Parâmetros Opcionais:

        prompt (Texto de apresentação da recompensa) (String) (Default: None)
        is_enabled (Se a recompensa está ativada) (True ou False) (Default: True)
        background_color (Cor de fundo da recompensa) (Default: #392e5c)
        is_user_input_required (Se o usuário deve digitar algo antes de receber a recompensa) (True ou False) (Default: False)
        is_max_per_stream_enabled (Se o usuário pode receber a recompensa mais de uma vez por stream) (True ou False) (Default: False)
        max_per_stream (Quantidade máxima de recompensas por stream) (Default: None)
        is_max_per_user_per_stream_enabled (Se o usuário pode receber a recompensa mais de uma vez por stream) (True ou False) (Default: False)
        max_per_user_per_stream (Quantidade máxima de recompensas por usuário por stream) (Default: 5)
        is_global_cooldown_enabled (Se o usuário pode receber a recompensa mais de uma vez por stream) (True ou False) (Default: False)
        global_cooldown_seconds (Quantidade de segundos para o cooldown global) (Default: 5)
        should_redemptions_skip_request_queue (Se a recompensa pode ser recebida mais de uma vez por usuário) (True ou False) (Default: False)
        """
        url = "{}channel_points/custom_rewards?broadcaster_id={}".format(url_base, user_id)
        data = {
            "title": title,
            "cost": cost,
            "prompt": prompt,
            "is_enabled": is_enabled,
            "background_color": background_color,
            "is_user_input_required": is_user_input_required,
            "is_max_per_stream_enabled": is_max_per_stream_enabled,
            "max_per_stream": max_per_stream,
            "is_max_per_user_per_stream_enabled": is_max_per_user_per_stream_enabled,
            "max_per_user_per_stream": max_per_user_per_stream,
            "is_global_cooldown_enabled": is_global_cooldown_enabled,
            "global_cooldown_seconds": global_cooldown_seconds,
            "should_redemptions_skip_request_queue": should_redemptions_skip_request_queue
        }
        r = requests.post(url, data=data, headers=self.headers)

        if r.status_code == 200:
            print(f"Recompensa {title} criada com sucesso!")
            # save(f"Reward: ")
            print(r.json()["id"])
        else:
            print(f"Erro ao criar recompensa {title}")
            print(r.json())

    def view_rewards(self):
        """
        Visualize as recompensas do seu canal.
        """
        url = "{}channel_points/custom_rewards?broadcaster_id={}".format(url_base, user_id)
        r = requests.get(url, headers=self.headers)

        if r.status_code == 200:
            print(f"{r.json()['data']}")
        else:
            print(f"Erro ao visualizar recompensas")
            # print(r.json())

